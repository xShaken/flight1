@model IEnumerable<flight.Models.Flight>
@{
    ViewData["Title"] = "Dashboard";
}

<div class="container-fluid mt-4">

<div class="container mt-4">
    <!-- Cards for Statistics -->
    <div class="row g-4 mb-4">
        <div class="col-md-4">
            <div class="card bg-primary text-white shadow">
                <div class="card-body">
                    <h5 class="card-title">Total Flights</h5>
                    <p class="card-text display-6">@(Model?.Count() ?? 0)</p>
                </div>
            </div>
        </div>
        <div class="col-md-4">
            <div class="card bg-success text-white shadow">
                <div class="card-body">
                    <h5 class="card-title">Available Airlines</h5>
                    <p class="card-text display-6">@ViewBag.AirlinesCount</p>
                </div>
            </div>
        </div>
        <div class="col-md-4">
            <div class="card bg-info text-white shadow">
                <div class="card-body">
                    <h5 class="card-title">Scheduled Flights Today</h5>
                    <p class="card-text display-6">@(Model?.Count(f => f.Status == "Scheduled" && f.DepartureDateTime.Date == DateTime.Today) ?? 0)</p>
                </div>
            </div>
        </div>
    </div>

    <!-- Today's Scheduled Flights with Modal -->
    <div class="card shadow mb-4">
        <div class="card-body">
            <h2 class="text-center fw-bold mb-4">Today's Scheduled Flights</h2>
            <input type="text" id="searchScheduled" class="form-control mb-3" placeholder="Search...">
            <div class="table-responsive">
                <table class="table table-hover table-bordered text-center align-middle" id="scheduledTable">
                    <thead class="table-dark">
                        <tr>
                            <th>#</th>
                            <th>Flight Number</th>
                            <th>Airline</th>
                            <th>Departure</th>
                            <th>Arrival</th>
                            <th>Dep. Time</th>
                            <th>Arr. Time</th>
                            <th>Status</th>
                            <th>Actions</th>
                        </tr>
                    </thead>
                    <tbody>
                        @if (Model != null && Model.Any(f => f.Status == "Scheduled" && f.DepartureDateTime.Date == DateTime.Today))
                        {
                            int count = 1;
                            @foreach (var flight in Model.Where(f => f.Status == "Scheduled" && f.DepartureDateTime.Date == DateTime.Today))
                            {
                                <tr>
                                    <td>@count</td>
                                    <td>@flight.FlightNumber</td>
                                    <td>@flight.Airline?.Name</td>
                                    <td>@flight.DepartureAirport?.Name</td>
                                    <td>@flight.ArrivalAirport?.Name</td>
                                    <td>@flight.DepartureDateTime.ToString("yyyy-MM-dd HH:mm")</td>
                                    <td>@flight.EstimatedArrivalDateTime.ToString("yyyy-MM-dd HH:mm")</td>
                                    <td>
                                        <span class="badge bg-success">@flight.Status</span>
                                    </td>
                                    <td>
                                        <button class="btn btn-primary btn-sm" data-bs-toggle="modal" data-bs-target="#flightModal-@flight.Id">Actions</button>
                                    </td>
                                </tr>
                                count++;
                            }
                        }
                        else
                        {
                            <tr>
                                <td colspan="9" class="text-muted">No scheduled flights for today.</td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
            <nav aria-label="Page navigation">
                <ul class="pagination justify-content-center" id="scheduledPagination"></ul>
            </nav>
        </div>
    </div>

    <!-- Modals for Today's Scheduled Flights -->
    @if (Model != null && Model.Any(f => f.Status == "Scheduled" && f.DepartureDateTime.Date == DateTime.Today))
    {
        @foreach (var flight in Model.Where(f => f.Status == "Scheduled" && f.DepartureDateTime.Date == DateTime.Today))
        {
            <div class="modal fade" id="flightModal-@flight.Id" tabindex="-1" aria-labelledby="flightModalLabel-@flight.Id" aria-hidden="true">
                <div class="modal-dialog">
                    <div class="modal-content">
                        <div class="modal-header">
                            <h5 class="modal-title" id="flightModalLabel-@flight.Id">Update Flight Status</h5>
                            <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                        </div>
                        <div class="modal-body">
                            <form asp-action="UpdateStatus" method="post">
                                <input type="hidden" name="id" value="@flight.Id" />
                                <div class="mb-3">
                                    <label for="delayMinutes-@flight.Id" class="form-label">Delay (minutes)</label>
                                    <input type="number" id="delayMinutes-@flight.Id" name="delayMinutes" class="form-control" placeholder="Enter delay in minutes" />
                                </div>
                                <div class="mb-3">
                                    <button type="submit" name="status" value="Delayed" class="btn btn-warning">Delay</button>
                                    <button type="submit" name="status" value="Departed" class="btn btn-info">Departed</button>
                                </div>
                            </form>
                        </div>
                    </div>
                </div>
            </div>
        }
    }

    <!-- Today's Flight Issues -->
    <div class="card shadow mb-4">
        <div class="card-body">
            <h2 class="text-center fw-bold mb-4">Today's Flight Issues</h2>
            <input type="text" id="searchIssues" class="form-control mb-3" placeholder="Search...">
            <div class="table-responsive">
                <table class="table table-hover table-bordered text-center align-middle" id="issuesTable">
                    <thead class="table-dark">
                        <tr>
                            <th>#</th>
                            <th>Flight Number</th>
                            <th>Airline</th>
                            <th>Departure</th>
                            <th>Arrival</th>
                            <th>Dep. Time</th>
                            <th>Arr. Time</th>
                            <th>Status</th>
                            <th>Actions</th>
                        </tr>
                    </thead>
                    <tbody>
                        @if (Model != null && Model.Any(f => (f.Status == "Delayed" || f.Status == "Cancelled") && f.DepartureDateTime.Date == DateTime.Today))
                        {
                            int count = 1;
                            @foreach (var flight in Model.Where(f => (f.Status == "Delayed" || f.Status == "Cancelled") && f.DepartureDateTime.Date == DateTime.Today))
                            {
                                <tr>
                                    <td>@count</td>
                                    <td>@flight.FlightNumber</td>
                                    <td>@flight.Airline?.Name</td>
                                    <td>@flight.DepartureAirport?.Name</td>
                                    <td>@flight.ArrivalAirport?.Name</td>
                                    <td>@flight.DepartureDateTime.ToString("yyyy-MM-dd HH:mm")</td>
                                    <td>@flight.EstimatedArrivalDateTime.ToString("yyyy-MM-dd HH:mm")</td>
                                    <td>
                                        <span class="badge @(flight.Status == "Delayed" ? "bg-warning" : "bg-danger")">@flight.Status</span>
                                    </td>
                                    <td>
                                        <form asp-action="ResolveIssue" method="post" class="d-inline">
                                            <input type="hidden" name="id" value="@flight.Id" />
                                            <button type="submit" class="btn btn-success btn-sm">Resolve</button>
                                        </form>
                                    </td>
                                </tr>
                                count++;
                            }
                        }
                        else
                        {
                            <tr>
                                <td colspan="9" class="text-muted">No flight issues for today.</td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
            <nav aria-label="Page navigation">
                <ul class="pagination justify-content-center" id="issuesPagination"></ul>
            </nav>
        </div>
    </div>

    <!-- Flights Departed Today -->
    <div class="card shadow mb-4">
        <div class="card-body">
            <h2 class="text-center fw-bold mb-4">Flights Departed Today</h2>
            <input type="text" id="searchDeparted" class="form-control mb-3" placeholder="Search...">
            <div class="table-responsive">
                <table class="table table-hover table-bordered text-center align-middle" id="departedTable">
                    <thead class="table-dark">
                        <tr>
                            <th>#</th>
                            <th>Flight Number</th>
                            <th>Airline</th>
                            <th>Departure</th>
                            <th>Arrival</th>
                            <th>Dep. Time</th>
                            <th>Arr. Time</th>
                            <th>Status</th>
                            <th>Actions</th>
                        </tr>
                    </thead>
                    <tbody>
                        @if (Model != null && Model.Any(f => f.Status == "Departed" && f.DepartureDateTime.Date == DateTime.Today))
                        {
                            int count = 1;
                            @foreach (var flight in Model.Where(f => f.Status == "Departed" && f.DepartureDateTime.Date == DateTime.Today))
                            {
                                <tr>
                                    <td>@count</td>
                                    <td>@flight.FlightNumber</td>
                                    <td>@flight.Airline?.Name</td>
                                    <td>@flight.DepartureAirport?.Name</td>
                                    <td>@flight.ArrivalAirport?.Name</td>
                                    <td>@flight.DepartureDateTime.ToString("yyyy-MM-dd HH:mm")</td>
                                    <td>@flight.EstimatedArrivalDateTime.ToString("yyyy-MM-dd HH:mm")</td>
                                    <td>
                                        <span class="badge bg-info">@flight.Status</span>
                                    </td>
                                    <td>
                                        <form asp-action="MarkAsArrived" method="post" class="d-inline">
                                            <input type="hidden" name="id" value="@flight.Id" />
                                            <button type="submit" class="btn btn-success btn-sm">Arrived</button>
                                        </form>
                                    </td>
                                </tr>
                                count++;
                            }
                        }
                        else
                        {
                            <tr>
                                <td colspan="9" class="text-muted">No departed flights for today.</td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
            <nav aria-label="Page navigation">
                <ul class="pagination justify-content-center" id="departedPagination"></ul>
            </nav>
        </div>
    </div>

    <!-- Flights Arrived Today -->
    <div class="card shadow">
        <div class="card-body">
            <h2 class="text-center fw-bold mb-4">Flights Arrived Today</h2>
            <input type="text" id="searchArrived" class="form-control mb-3" placeholder="Search...">
            <div class="table-responsive">
                <table class="table table-hover table-bordered text-center align-middle" id="arrivedTable">
                    <thead class="table-dark">
                        <tr>
                            <th>#</th>
                            <th>Flight Number</th>
                            <th>Airline</th>
                            <th>Departure</th>
                            <th>Arrival</th>
                            <th>Dep. Time</th>
                            <th>Arr. Time</th>
                            <th>Status</th>
                        </tr>
                    </thead>
                    <tbody>
                        @if (Model != null && Model.Any(f => f.Status == "Arrived" && f.DepartureDateTime.Date == DateTime.Today))
                        {
                            int count = 1;
                            @foreach (var flight in Model.Where(f => f.Status == "Arrived" && f.DepartureDateTime.Date == DateTime.Today))
                            {
                                <tr>
                                    <td>@count</td>
                                    <td>@flight.FlightNumber</td>
                                    <td>@flight.Airline?.Name</td>
                                    <td>@flight.DepartureAirport?.Name</td>
                                    <td>@flight.ArrivalAirport?.Name</td>
                                    <td>@flight.DepartureDateTime.ToString("yyyy-MM-dd HH:mm")</td>
                                    <td>@flight.EstimatedArrivalDateTime.ToString("yyyy-MM-dd HH:mm")</td>
                                    <td>
                                        <span class="badge bg-success">@flight.Status</span>
                                    </td>
                                </tr>
                                count++;
                            }
                        }
                        else
                        {
                            <tr>
                                <td colspan="8" class="text-muted">No arrived flights for today.</td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
            <nav aria-label="Page navigation">
                <ul class="pagination justify-content-center" id="arrivedPagination"></ul>
            </nav>
        </div>
    </div>
</div>
</div>
@section Scripts {
    <script>
        function paginateTable(tableId, paginationId, entriesPerPage) {
            const table = document.getElementById(tableId);
            const rows = table.querySelectorAll('tbody tr');
            const pageCount = Math.ceil(rows.length / entriesPerPage);
            const pagination = document.getElementById(paginationId);

            function showPage(page) {
                const start = (page - 1) * entriesPerPage;
                const end = start + entriesPerPage;
                rows.forEach((row, index) => {
                    row.style.display = (index >= start && index < end) ? '' : 'none';
                });
            }

            function updatePagination(currentPage) {
                pagination.innerHTML = '';
                for (let i = 1; i <= pageCount; i++) {
                    const li = document.createElement('li');
                    li.className = 'page-item' + (i === currentPage ? ' active' : '');
                    const a = document.createElement('a');
                    a.className = 'page-link';
                    a.href = '#';
                    a.textContent = i;
                    a.addEventListener('click', (e) => {
                        e.preventDefault();
                        showPage(i);
                        updatePagination(i);
                    });
                    li.appendChild(a);
                    pagination.appendChild(li);
                }
            }

            showPage(1);
            updatePagination(1);
        }

        function filterTable(tableId, searchId) {
            const search = document.getElementById(searchId);
            const table = document.getElementById(tableId);
            const rows = table.querySelectorAll('tbody tr');

            search.addEventListener('input', () => {
                const filter = search.value.toLowerCase();
                rows.forEach(row => {
                    const text = row.textContent.toLowerCase();
                    row.style.display = text.includes(filter) ? '' : 'none';
                });
            });
        }

        document.addEventListener('DOMContentLoaded', () => {
            paginateTable('scheduledTable', 'scheduledPagination', 6);
            paginateTable('issuesTable', 'issuesPagination', 6);
            paginateTable('departedTable', 'departedPagination', 6);
            paginateTable('arrivedTable', 'arrivedPagination', 6);

            filterTable('scheduledTable', 'searchScheduled');
            filterTable('issuesTable', 'searchIssues');
            filterTable('departedTable', 'searchDeparted');
            filterTable('arrivedTable', 'searchArrived');
        });
    </script>
}}